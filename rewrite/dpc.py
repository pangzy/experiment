#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""data process class"""
import random
import math
import xlrd
import copy
import glv


def get_time_from_xls(x):
    """how to transfer time data from excel"""
    h = int(24 * x)
    m = int(60 * (24 * x - h))
    s = int(60 * (24 * x - h) - m)


class DataGenerator(object):
    """------------------------------------------------------------------
    generator for req
    size distribution is a uniform random distribution
    the arrival events occur under a poisson distribution,
    so the arrival time of req is generated by a exponential distribution
    ------------------------------------------------------------------"""

    def __init__(self):
        """init function"""
        self.time = []
        self.size = []
        self.seq = []
        self.glv = glv.get_glv()
        self.t = self.glv["t"]
        self.f = self.glv["f"]
        self.n = self.glv["n"]
        self.maxs = self.glv["maxs"]
        self.mins = self.glv["mins"]

    def gen_poisson(self, t):
        """generate a integer sequence under poisson distribution"""
        N = 0
        lamda = 1.0 / self.f
        ti = 0.0
        while True:
            ti += random.expovariate(lamda)
            if int(ti) >= t:
                break
            else:
                N += 1
                self.seq.append(int(ti))
        self.n = N

    def gen_uniform(self, n, t, use=""):
        """generate a integer sequence under uniform random distribution"""
        mins = self.mins
        maxs = self.maxs
        if use == "time":
            for i in xrange(n):
                self.seq.append(random.randint(0, t))
            self.seq.sort()
        elif use == "size":
            for i in xrange(n):
                self.seq.append(random.randint(mins, maxs))
        else:
            print "need a 'use' argument for generate uniform data."
            exit()

    def get_time(self):
        """get req arrival time from sequence"""
        self.time = copy.copy(self.seq)

    def get_size(self):
        """get req size from sequence"""
        self.size = copy.copy(self.seq)


class DataLoader(object):
    def __init__(self):
        """init function"""
        self.time = []
        self.size = []
        self.n = 0
        self.t = 0
        self.tn = 0
        self.glv = glv.get_glv()
        self.path = self.glv["data1"]
        self.tl = self.glv["tl"]

    def load(self, position):
        """load data from xls file"""
        print "loading data..."
        rfile = self.path
        sheet_index = position["sheet_index"]
        start_row = position["start_row"]
        end_row = position["end_row"]
        time_col = position["time_col"]
        size_col = position["size_col"]

        xls_file = xlrd.open_workbook(rfile)
        table = xls_file.sheet_by_index(sheet_index)
        time_data = table.col_value(time_col)
        size_data = table.col_value(size_col)
        self.n = end_row - start_row + 1
        start_time = int(time_data[start_row] * 24)
        end_time = int(time_data[end_row] * 24) + 1
        self.t = (end_time - start_time) * 3600
        self.tn = int(math.ceil(self.t / float(self.tl)))
        self.f = self.t / self.n

        for i in range(start_row, end_row + 1):
            t = int(time_data[i] * 24 * 60 * 60) - start_time * 60 * 60
            s = int(size_data[i])
            self.time.append(t)
            self.size.append(s)
